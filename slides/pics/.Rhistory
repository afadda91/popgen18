# list order of samples for creation of phenotype file
sample <- read.table(file = "../../data/imputed/sample_lists/chr1.samples.txt", header = FALSE, as.is = TRUE)
pheno <- read.table(file = "ptd_compl_excluded.txt", header = TRUE, as.is = TRUE)
related <- read.table(file = "remove_related_fid_iid.txt", header = TRUE, as.is = TRUE)
ls -lorth
pheno <- pheno[!(pheno$iid %in% related$IID1),]
pheno$ID <- paste(pheno$fid, pheno$iid, sep = "_")
sum(pheno$ID %in% sample$V1) # All are found there
rownames(pheno) <- pheno$ID
# create phenotypes.txt
dat <- data.frame(ID_1=sample$V1, ID_2=sample$V1, missing=0, stringsAsFactors = FALSE)
dat$allPTD <- pheno[dat$ID_1, "allPTD"]
table(dat$allPTD, useNA = "always")
table(pheno$allPTD, useNA = "always")
dat$earlyPTD <- pheno[dat$ID_1, "earlyPTD"]
table(dat$earlyPTD, useNA = "always")
table(pheno$earlyPTD, useNA = "always")
dat$postTerm <- pheno[dat$ID_1, "postTerm"]
table(dat$postTerm, useNA = "always")
table(pheno$postTerm, useNA = "always")
dat$GAraw <- pheno[dat$ID_1, "GA"]
table(is.na(dat$GAraw), useNA = "always")
table(is.na(pheno$GA), useNA = "always")
# Investigating principal components before doing GAnrm
pca <- read.table(file = "calculate_PC_for_correction/ptd_ld_no_rel_pca.eigenvec", header = FALSE, as.is = TRUE)
rownames(pca) <- paste(pca$V1, pca$V2, sep = "_")
sum(rownames(pca)%in%rownames(pheno))
pca <- pca[rownames(pheno),]
for(pc in 1:10){
tmp1 <- pca[,pc+2]
tmp2 <- pheno$GA
print(summary(lm(tmp2 ~ tmp1))$coef[2,4])
}
# None are marginally associated
dat$GAnrm <- qnorm((rank(dat$GAraw, na.last = "keep") - 0.375)/(sum(!is.na(dat$GAraw))+0.25))
dat$childSEX <- pheno[dat$ID_1, "ksex"]
table(dat$childSEX, useNA = "always")
write.table(x = dat, file = "ptd_phenotypes.txt", quote = FALSE, row.names = FALSE, col.names = TRUE)
pheno$GAclean[pheno$induced==TRUE] <- NA
# Adding cleaned GA to pheno, with GA removed for induced and elective
pheno$GAclean <- phena$GA
pheno$GAclean[pheno$induced==TRUE] <- NA
pheno$GAclean[pheno$elective==1] <- NA
#dat$GAraw <- pheno[dat$ID_1, "GA"]
dat$GAraw <- pheno[dat$ID_1, "GAclean"]
table(is.na(dat$GAraw), useNA = "always")
# Adding cleaned GA to pheno, with GA removed for induced and elective
pheno$GAclean <- pheno$GA
pheno$GAclean[pheno$induced==TRUE] <- NA
pheno$GAclean[pheno$elective==1] <- NA
#dat$GAraw <- pheno[dat$ID_1, "GA"]
dat$GAraw <- pheno[dat$ID_1, "GAclean"]
table(is.na(dat$GAraw), useNA = "always")
table(is.na(pheno$GA), useNA = "always")
#table(is.na(pheno$GA), useNA = "always")
table(is.na(pheno$GAclean), useNA = "always")
# Investigating principal components before doing GAnrm
pca <- read.table(file = "calculate_PC_for_correction/ptd_ld_no_rel_pca.eigenvec", header = FALSE, as.is = TRUE)
rownames(pca) <- paste(pca$V1, pca$V2, sep = "_")
sum(rownames(pca)%in%rownames(pheno))
pca <- pca[rownames(pheno),]
for(pc in 1:10){
tmp1 <- pca[,pc+2]
tmp2 <- pheno$GA
print(summary(lm(tmp2 ~ tmp1))$coef[2,4])
}
# None are marginally associated
dat$GAnrm <- qnorm((rank(dat$GAraw, na.last = "keep") - 0.375)/(sum(!is.na(dat$GAraw))+0.25))
dat$childSEX <- pheno[dat$ID_1, "ksex"]
table(dat$childSEX, useNA = "always")
write.table(x = dat, file = "ptd_phenotypes.txt", quote = FALSE, row.names = FALSE, col.names = TRUE)
setwd("~/Desktop/mnt2/EGG/maternal_GWAS_GA_preterm_postterm/analyses/dnbc_goya_controls")
# list order of samples for creation of phenotype file
sample <- read.table(file = "../../data/imputed/sample_lists/chr1.samples.txt", header = FALSE, as.is = TRUE)
pheno <- read.table(file = "goya_controls_compl_excluded.txt", header = TRUE, as.is = TRUE)
related <- read.table(file = "remove_related_fid_iid.txt", header = TRUE, as.is = TRUE)
pheno <- pheno[!(pheno$iid %in% related$IID1),]
pheno$ID <- paste(pheno$fid, pheno$iid, sep = "_")
sum(pheno$ID %in% sample$V1) # All are found there
rownames(pheno) <- pheno$ID
# create phenotypes.txt
dat <- data.frame(ID_1=sample$V1, ID_2=sample$V1, missing=0, stringsAsFactors = FALSE)
dat$allPTD <- pheno[dat$ID_1, "allPTD"]
table(dat$allPTD, useNA = "always")
table(pheno$allPTD, useNA = "always")
knitr::opts_chunk$set(echo = TRUE)
f <- 0.54 # allele frequency
n <- 50000 # number of samples
g <- sample(x = 0:2, size = n, replace = TRUE, prob = c((1-f)^2, 2*f*(1-f), f^2))
i_ga <- rnorm(n = n)
get_tertile_fits <- function(dat){
# fit model for full data
fit <- lm(ga~g, data = dat)
co <- summary(fit)$coefficients[2,]
# divide by tertiles
qs <- as.numeric(quantile(x = dat$ga, probs = c(1/3, 2/3)))
dat0 <- dat[dat$ga<qs[1],]
dat1 <- dat[(dat$ga>=qs[1])&(dat$ga<qs[2]),]
dat2 <- dat[(dat$ga>=qs[2]),]
# fit model for data subset
fit0 <- lm(ga~g, data = dat0)
co0 <- summary(fit0)$coefficients[2,]
fit1 <- lm(ga~g, data = dat1)
co1 <- summary(fit1)$coefficients[2,]
fit2 <- lm(ga~g, data = dat2)
co2 <- summary(fit2)$coefficients[2,]
ret <- rbind(co,co0,co1,co2)
rownames(ret) <- c("g","g_t1","g_t2","g_t3")
return(ret)
}
b <- 0.034
ga_all <- b*g + i_ga
datA <- data.frame(g=g, ga=ga_all)
get_tertile_fits(datA)
b <- 0.05
q1 <- quantile(x = i_ga, probs = 1/4)
ga_some <- (i_ga > q1)*b*g + i_ga
datB <- data.frame(g=g, ga=ga_some)
get_tertile_fits(datB)
b <- 0.07
ga_half <- (i_ga > 0)*b*g + i_ga
datC <- data.frame(g=g, ga=ga_half)
get_tertile_fits(datC)
library(ggplot2)
afA <- get_allele_freqs(datA)
afB <- get_allele_freqs(datB)
afC <- get_allele_freqs(datC)
get_allele_freqs <- function(dat){
dat$tmp2 <- as.numeric(cut_number(dat$ga,10))
frames <- split(dat, dat$tmp2)
tabls <- lapply(X = frames, FUN = function(frame){table(frame$g)})
gt_counts <- do.call(rbind, tabls)
a0_counts <- 2*gt_counts[,1]+gt_counts[,2]
a1_counts <- 2*gt_counts[,3]+gt_counts[,2]
t_counts <- a0_counts + a1_counts
freqs <- a1_counts/t_counts
m_ga <- tapply(X = dat$ga, INDEX = dat$tmp2, FUN = mean)
ret <- rbind(m_ga, freqs)
rownames(ret) <- c("m_ga", "f_a0")
return(ret)
}
afA <- get_allele_freqs(datA)
afB <- get_allele_freqs(datB)
afC <- get_allele_freqs(datC)
#install.packages("broman")
library(broman)
pink <- brocolors("crayons")["Pink Sherbert"]
blue <- brocolors("crayons")["Pacific Blue"]
green <- brocolors("crayons")["Jungle Green"]
orange <- brocolors("crayons")["Burnt Orange"]
plot(afA[1,], afA[2,], type="l", ylab="Allele frequency", xlab="Gestational age", col=blue, ylim=c(min(afA[2,],afB[2,],afC[2,]),max(afA[2,],afB[2,],afC[2,])))
lines(afB[1,], afB[2,], col=pink)
get_allele_freqs <- function(dat){
dat$tmp2 <- as.numeric(cut_number(dat$ga,10))
frames <- split(dat, dat$tmp2)
tabls <- lapply(X = frames, FUN = function(frame){table(frame$g)})
gt_counts <- do.call(rbind, tabls)
a0_counts <- 2*gt_counts[,1]+gt_counts[,2]
a1_counts <- 2*gt_counts[,3]+gt_counts[,2]
t_counts <- a0_counts + a1_counts
freqs <- a1_counts/t_counts
m_ga <- tapply(X = dat$ga, INDEX = dat$tmp2, FUN = mean)
ret <- rbind(m_ga, freqs, t_counts)
rownames(ret) <- c("m_ga", "f_a0", "t_counts")
return(ret)
}
afA <- get_allele_freqs(datA)
afB <- get_allele_freqs(datB)
afC <- get_allele_freqs(datC)
#install.packages("broman")
library(broman)
pink <- brocolors("crayons")["Pink Sherbert"]
blue <- brocolors("crayons")["Pacific Blue"]
green <- brocolors("crayons")["Jungle Green"]
orange <- brocolors("crayons")["Burnt Orange"]
plot(afA[1,], afA[2,], type="l", ylab="Allele frequency", xlab="Gestational age", col=blue, ylim=c(min(afA[2,],afB[2,],afC[2,]),max(afA[2,],afB[2,],afC[2,])))
lines(afB[1,], afB[2,], col=pink)
lines(afC[1,], afC[2,], col=green)
abline(h = 0.54, lty=3, col=orange)
get_allele_freqs <- function(dat){
dat$tmp2 <- as.numeric(cut_number(dat$ga,10))
frames <- split(dat, dat$tmp2)
tabls <- lapply(X = frames, FUN = function(frame){table(frame$g)})
gt_counts <- do.call(rbind, tabls)
a0_counts <- 2*gt_counts[,1]+gt_counts[,2]
a1_counts <- 2*gt_counts[,3]+gt_counts[,2]
t_counts <- a0_counts + a1_counts
freqs <- a1_counts/t_counts
m_ga <- tapply(X = dat$ga, INDEX = dat$tmp2, FUN = mean)
var <- freqs*(1-freqs)/t_counts
ret <- rbind(m_ga, freqs, sqrt(var))
rownames(ret) <- c("m_ga", "f_a0", "sd")
return(ret)
}
afA <- get_allele_freqs(datA)
afB <- get_allele_freqs(datB)
afC <- get_allele_freqs(datC)
#install.packages("broman")
library(broman)
pink <- brocolors("crayons")["Pink Sherbert"]
blue <- brocolors("crayons")["Pacific Blue"]
green <- brocolors("crayons")["Jungle Green"]
orange <- brocolors("crayons")["Burnt Orange"]
plot(afA[1,], afA[2,], type="l", ylab="Allele frequency", xlab="Gestational age", col=blue, ylim=c(min(afA[2,],afB[2,],afC[2,]),max(afA[2,],afB[2,],afC[2,])))
lines(afB[1,], afB[2,], col=pink)
lines(afC[1,], afC[2,], col=green)
abline(h = 0.54, lty=3, col=orange)
plot(afA[1,], afA[2,], type="n", ylab="Allele frequency", xlab="Gestational age", col=blue, ylim=c(min(afA[2,],afB[2,],afC[2,]),max(afA[2,],afB[2,],afC[2,])))
expr = errbar(afA[1,], afA[2,], afA[2,]+afA[3,], afA[2,]-afA[3,], add=T, pch=1, cap=.1)
library("Hmisc")
plot(afA[1,], afA[2,], type="n", ylab="Allele frequency", xlab="Gestational age", col=blue, ylim=c(min(afA[2,],afB[2,],afC[2,]),max(afA[2,],afB[2,],afC[2,])))
expr = errbar(afA[1,], afA[2,], afA[2,]+afA[3,], afA[2,]-afA[3,], add=T, pch=1, cap=.1)
mastr_new <- read.table(file = "../data_overview/case_control_definitions_sex_and_exclusions.txt", stringsAsFactors = FALSE, header = TRUE)
setwd("~/Desktop/mnt2/EGG/maternal_GWAS_GA_preterm_postterm/analyses/dnbc_goya_controls")
mastr_new <- read.table(file = "../data_overview/case_control_definitions_sex_and_exclusions.txt", stringsAsFactors = FALSE, header = TRUE)
dat <- mastr_new[mastr_new$is_goya==TRUE,]
dat <- dat[dat$is_goya_case==0,]
str(dat)
table(dat$mult_preg)
table(dat$induced)
table(dat$elective)
table(dat$preg_comp)
table(dat$allPTD)
table(dat$earlyPTD)
table(dat$postTerm)
mastr_new <- read.table(file = "../data_overview/case_control_definitions_sex_and_exclusions.txt", stringsAsFactors = FALSE, header = TRUE)
setwd("~/Desktop/mnt2/EGG/maternal_GWAS_GA_preterm_postterm/analyses/dnbc_goya_cases")
mastr_new <- read.table(file = "../data_overview/case_control_definitions_sex_and_exclusions.txt", stringsAsFactors = FALSE, header = TRUE)
dat <- mastr_new[mastr_new$is_goya==TRUE,]
dat <- dat[dat$is_goya_case==0,]
str(dat)
mastr_new <- read.table(file = "../data_overview/case_control_definitions_sex_and_exclusions.txt", stringsAsFactors = FALSE, header = TRUE)
dat <- mastr_new[mastr_new$is_goya==TRUE,]
dat <- dat[dat$is_goya_case==1,]
str(dat)
table(dat$mult_preg)
table(dat$induced)
table(dat$elective)
table(dat$preg_comp)
table(dat$allPTD)
table(dat$earlyPTD)
table(dat$postTerm)
power.t.test(delta = 0.37, sd = 0.37, sig.level = 0.8)
?power.t.test
power.t.test(delta = 0.37, sd = 0.37, sig.level = 0.05, power = 0.8)
power.t.test(delta = 0.37, sd = 0.37, sig.level = 0.05, n=16)
?chisq.test
x <- matrix(c(31, 144, 51, 161), nrow = 2, byrow = TRUE)
chisq.test(x = x, correct = FALSE)
chisq.test(x = x, correct = TRUE)
x <- matrix(c(31, 144, 51, 161), nrow = 2, byrow = FALSE)
chisq.test(x = x, correct = TRUE)
chisq.test(x = x, correct = FALSE)
x
marg_col <- (x[1,]+x[2,])/sum(x)
marg_col
marg_col <- (x[,1]+x[,2])/sum(x)
marg_col <- (x[1,]+x[2,])/sum(x)
marg_row <- (x[,1]+x[,2])/sum(x)
marg_col <- (x[,1]+x[,2])/sum(x)
marg_row <- (x[1,]+x[2,])/sum(x)
marg_col <- t((x[,1]+x[,2])/sum(x))
marg_col
marg_row
marg_row <- t(t((x[1,]+x[2,])/sum(x)))
marg_col
marg_row <- t(t((x[1,]+x[2,])/sum(x)))
marg_row
marg_row <- t((x[1,]+x[2,])/sum(x))
marg_col <- t(t((x[,1]+x[,2])/sum(x)))
marg_col
marg_row
marg_col%8%marg_row
marg_col%*%marg_row
marg_col%*%marg_row*sum(x)
x
sum((c(exp)-c(x))^2/c(exp))
ex <- marg_col%*%marg_row*sum(x)
sum((c(ex)-c(x))^2/c(ex))
x
x <- t(x)
chisq.test(x = x, correct = FALSE)
x
x <- matrix(c(51, 144, 31, 161), nrow = 2, byrow = FALSE)
chisq.test(x = x, correct = FALSE)
dat <- c(55, 88, 49, 7, 11, 90, 52, 10, 90, 83)
median(dat)
mean(dat)
sd(dat)
mean(dat) - 2*sd(dat)/sqrt(10)
mean(dat) + 2*sd(dat)/sqrt(10)
dat <- 84:140
probs <- 0.5*dat
probs <- 0.5^dat
sum(probs)
?rbinom
dbinom(84, 140, prob = p)
dbinom(84, 140, prob = 0.5)
dbinom(84:140, 140, prob = 0.5)
sum(dbinom(84:140, 140, prob = 0.5))
dbinom(x = 84, size = 140, prob = 0.5)
sum(dbinom(85:140, 140, prob = 0.5))
pbinom(q = 84, size = 140, lower.tail = FALSE)
pbinom(q = 84, size = 140, prob = 0.5, lower.tail = FALSE)
dat <- c(37,78,85)
sum(dat)
(dat[1]+dat[2]/2)/sum(dat)
#chisq.test(x = dat, p = )
p<-(dat[1]+dat[2]/2)/sum(dat)
chisq.test(x = dat, p = c(p^2, 2*p*(1-p), (1-p)^2))
dat <- cbind(0:10, c(112, 20, 10, 10, 5, 6, 2, 2, 1, 1, 1))
dat
sum(dat[,1]*dat[,2])/sum(dat[,2])
sum(dat[,1]*dat[,2])/sum(dat[,2])
f <- 0.25 # allele frequency
n <- 50000 # number of samples
g <- sample(x = 0:2, size = n, replace = TRUE, prob = c((1-f)^2, 2*f*(1-f), f^2))
i_ga <- rnorm(n = n)
b <- 0.3
p <- b*g + i_ga
dat <- data.frame(g=as.factor(g), p=p)
library(plyr)
cdat <- ddply(dat, "g", summarise, rating.mean=mean(p))
cdat
hist(dat$p, xlab="Quantitative trait value")
hist(dat$p, xlab="Quantitative trait value", xaxt="n")
axis(side = 1, labels=FALSE)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", title="")
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
?png
png(filename = "qtv_hist.png", width = 6, height = 4)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 12, height = 8)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 6, height = 4, units="cm")
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 6, height = 4, units="cm", res=100)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 6, height = 4, units="cm", res=200)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 6, height = 4, units="cm", res=300)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 480, height = 480)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
setwd("~/Desktop/Popgen2018/pics")
png(filename = "qtv_hist.png", width = 480, height = 480)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 480, height = 240)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtv_hist.png", width = 480, height = 240)
par(bg=NA)
hist(dat$p, xlab="Quantitative trait value", xaxt="n", main="")
axis(side = 1, labels=FALSE)
dev.off()
f <- 0.25 # allele frequency
n <- 50000 # number of samples
g <- sample(x = 0:2, size = n, replace = TRUE, prob = c((1-f)^2, 2*f*(1-f), f^2))
i_ga <- rnorm(n = n)
b <- 0.3
p <- b*g + i_ga
dat <- data.frame(g=as.factor(g), p=p)
library(plyr)
cdat <- ddply(dat, "g", summarise, rating.mean=mean(p))
cdat
library(ggplot2)
x <- seq(-4, 6, length=100)
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3))
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA, border = NA)
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA, border = NA)
?legend
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA, bty="n")
plot(x, 0.5625*dnorm(x)+0.3750*dnorm(x,mean = 1)+0.0625*dnorm(x,mean = 2), type = "l", lty=1, xlab = "Continous trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
plot(x, 0.5625*dnorm(x)+0.3750*dnorm(x,mean = 1)+0.0625*dnorm(x,mean = 2), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
png(filename = "qtl_dist_pop.png", width = 480, height = 240)
plot(x, 0.5625*dnorm(x)+0.3750*dnorm(x,mean = 1)+0.0625*dnorm(x,mean = 2), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
dev.off()
png(filename = "qtl_dist.png", width = 480, height = 240)
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA, bty="n")
dev.off()
png(filename = "qtl_dist.png", width = 480, height = 240)
par(bg=NA)
plot(x, dnorm(x), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
lines(x, dnorm(x,mean = 1), lty=2)
lines(x, dnorm(x,mean = 2), lty=3)
legend("topright", inset=.05, title=" Trait distributions ",
legend = c("AA", "Aa", "aa"), lwd=2, lty=c(1, 2, 3), bg=NA, bty="n")
dev.off()
png(filename = "qtl_dist_pop.png", width = 480, height = 240)
par(bg=NA)
plot(x, 0.5625*dnorm(x)+0.3750*dnorm(x,mean = 1)+0.0625*dnorm(x,mean = 2), type = "l", lty=1, xlab = "Quantitative trait value", xaxt="n", ylab="Density")
axis(side = 1, labels=FALSE)
dev.off()
